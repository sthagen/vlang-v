vlib/v/checker/tests/mul_op_wrong_type_err.vv:4:13: error: mismatched types `Aaa` and `int literal`
    2 | struct Aaa{}
    3 | fn main() {
    4 |     println(Aaa{} * 10)
      |             ~~~~~~~~~~
    5 |     println(10 * Aaa{})
    6 |     println([1,2,3] * 10)
vlib/v/checker/tests/mul_op_wrong_type_err.vv:4:13: error: infix expr: cannot use `int literal` (right expression) as `Aaa`
    2 | struct Aaa{}
    3 | fn main() {
    4 |     println(Aaa{} * 10)
      |             ~~~~~~~~~~
    5 |     println(10 * Aaa{})
    6 |     println([1,2,3] * 10)
vlib/v/checker/tests/mul_op_wrong_type_err.vv:5:13: error: mismatched types `int literal` and `Aaa`
    3 | fn main() {
    4 |     println(Aaa{} * 10)
    5 |     println(10 * Aaa{})
      |             ~~~~~~~~~~
    6 |     println([1,2,3] * 10)
    7 |     println(10 * [1,2,3])
vlib/v/checker/tests/mul_op_wrong_type_err.vv:5:13: error: infix expr: cannot use `Aaa` (right expression) as `int literal`
    3 | fn main() {
    4 |     println(Aaa{} * 10)
    5 |     println(10 * Aaa{})
      |             ~~~~~~~~~~
    6 |     println([1,2,3] * 10)
    7 |     println(10 * [1,2,3])
vlib/v/checker/tests/mul_op_wrong_type_err.vv:6:13: error: mismatched types `[]int` and `int literal`
    4 |     println(Aaa{} * 10)
    5 |     println(10 * Aaa{})
    6 |     println([1,2,3] * 10)
      |             ~~~~~~~~~~~~
    7 |     println(10 * [1,2,3])
    8 |     a := map[string]int
vlib/v/checker/tests/mul_op_wrong_type_err.vv:6:13: error: infix expr: cannot use `int literal` (right expression) as `[]int`
    4 |     println(Aaa{} * 10)
    5 |     println(10 * Aaa{})
    6 |     println([1,2,3] * 10)
      |             ~~~~~~~~~~~~
    7 |     println(10 * [1,2,3])
    8 |     a := map[string]int
vlib/v/checker/tests/mul_op_wrong_type_err.vv:7:13: error: mismatched types `int literal` and `[]int`
    5 |     println(10 * Aaa{})
    6 |     println([1,2,3] * 10)
    7 |     println(10 * [1,2,3])
      |             ~~~~~~~~~~~~
    8 |     a := map[string]int
    9 |     println(a * 10)
vlib/v/checker/tests/mul_op_wrong_type_err.vv:7:13: error: infix expr: cannot use `[]int` (right expression) as `int literal`
    5 |     println(10 * Aaa{})
    6 |     println([1,2,3] * 10)
    7 |     println(10 * [1,2,3])
      |             ~~~~~~~~~~~~
    8 |     a := map[string]int
    9 |     println(a * 10)
vlib/v/checker/tests/mul_op_wrong_type_err.vv:9:13: error: mismatched types `map[string]int` and `int literal`
    7 |     println(10 * [1,2,3])
    8 |     a := map[string]int
    9 |     println(a * 10)
      |             ~~~~~~
   10 |     println(10 * a)
   11 |     c1 := cmplx.complex(1,-2)
vlib/v/checker/tests/mul_op_wrong_type_err.vv:9:13: error: infix expr: cannot use `int literal` (right expression) as `map[string]int`
    7 |     println(10 * [1,2,3])
    8 |     a := map[string]int
    9 |     println(a * 10)
      |             ~~~~~~
   10 |     println(10 * a)
   11 |     c1 := cmplx.complex(1,-2)
vlib/v/checker/tests/mul_op_wrong_type_err.vv:10:13: error: mismatched types `int literal` and `map[string]int`
    8 |     a := map[string]int
    9 |     println(a * 10)
   10 |     println(10 * a)
      |             ~~~~~~
   11 |     c1 := cmplx.complex(1,-2)
   12 |     c2 := c1 * 2.0
vlib/v/checker/tests/mul_op_wrong_type_err.vv:10:13: error: infix expr: cannot use `map[string]int` (right expression) as `int literal`
    8 |     a := map[string]int
    9 |     println(a * 10)
   10 |     println(10 * a)
      |             ~~~~~~
   11 |     c1 := cmplx.complex(1,-2)
   12 |     c2 := c1 * 2.0
vlib/v/checker/tests/mul_op_wrong_type_err.vv:12:8: error: infix expr: cannot use `float literal` (right expression) as `math.complex.Complex`
   10 |     println(10 * a)
   11 |     c1 := cmplx.complex(1,-2)
   12 |     c2 := c1 * 2.0
      |           ~~~~~~~~
   13 |     println(c2)
   14 |     c3 := 2.0 * c1
vlib/v/checker/tests/mul_op_wrong_type_err.vv:14:8: error: infix expr: cannot use `math.complex.Complex` (right expression) as `float literal`
   12 |     c2 := c1 * 2.0
   13 |     println(c2)
   14 |     c3 := 2.0 * c1
      |           ~~~~~~~~
   15 |     println(c3)
   16 | }
